AWSTemplateFormatVersion: '2010-09-09'
Description: Minimal Web server with SSL/TLS

Parameters:
  Ec2InstanceType:
    Type: String
    Default: t2.micro
  Ec2Image:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  SshKeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance.
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SshLocation:
    Description: The IP address range that can be used access the EC2 instance using SSH.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: 10.0.0.0/16

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'

  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  Ec2InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow access SSH (port 22) and HTTP (port 80). HTTP access is only allowed through the ApiGateway VPC Link.
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SshLocation
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref ApiGatewayVpcLinkSecurityGroup

  ApiGatewayVpcLinkSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: to be able to access 80 port of EC2 instance

  Ec2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref Ec2InstanceType
      ImageId: !Ref Ec2Image
      KeyName: !Ref SshKeyName
      NetworkInterfaces:
        - GroupSet:
            - !Ref Ec2InstanceSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PublicSubnet
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum install -y docker git
          curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          docker run -d -p 80:80 httpd

  ApiGatewayVpcLink:
    Type: AWS::ApiGatewayV2::VpcLink
    Properties:
      Name: !Sub "${AWS::StackName}-VpcLink"
      SecurityGroupIds:
        - !Ref ApiGatewayVpcLinkSecurityGroup
      SubnetIds:
        - !Ref PublicSubnet

  ApiGatewayHttpProxyApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      ProtocolType: HTTP
      Name: !Sub "${AWS::StackName}-HttpProxyApi"

  ApiGatewayHttpProxyApiDefaultStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ApiGatewayHttpProxyApi
      AutoDeploy: true
      StageName: $default

  ApiGatewayHttpProxyApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGatewayHttpProxyApi
      RouteKey: ANY /{proxy+}
      Target: !Join
        - /
        - - integrations
          - !Ref ApiGatewayHttpProxyApiVpcLinkItengration

  ApiGatewayHttpProxyApiVpcLinkItengration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGatewayHttpProxyApi
      ConnectionId: !Ref ApiGatewayVpcLink
      ConnectionType: VPC_LINK
      PayloadFormatVersion: 1.0
      IntegrationMethod: ANY
      IntegrationType: HTTP_PROXY
      IntegrationUri: !GetAtt ServiceDiscoveryWebServerService.Arn

  ServiceDiscoveryNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: !Sub "${AWS::StackName}-Vpc"
      Vpc: !Ref VPC

  ServiceDiscoveryWebServerService:
    Type: 'AWS::ServiceDiscovery::Service'
    Properties:
      DnsConfig:
        DnsRecords:
          - Type: SRV
            TTL: 300
        RoutingPolicy: WEIGHTED
      NamespaceId: !Ref ServiceDiscoveryNamespace

  ServiceDiscoveryInstance:
    Type: AWS::ServiceDiscovery::Instance
    Properties:
      InstanceAttributes:
        AWS_INSTANCE_IPV4: !GetAtt Ec2Instance.PrivateIp
        AWS_INSTANCE_PORT: 80
      InstanceId: !Ref Ec2Instance
      ServiceId: !Ref ServiceDiscoveryWebServerService

Outputs:
  Ec2InstancePublicIp:
    Description: "EC2 Instance Public IP"
    Value: !GetAtt Ec2Instance.PublicIp
  ApiGatewayUrl:
    Description: "API Gateway endpoint URL for $default stage"
    Value: !Sub
      - "https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com/"
      - ApiId: !Ref ApiGatewayHttpProxyApi
